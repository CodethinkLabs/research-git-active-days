#!/usr/bin/env python

import argparse
import os
import subprocess
import sys


def active_days(repo, ref):
    '''Returns the set of days where 'repo' had at least one commit.'''

    text = subprocess.check_output(
        ['git', 'log' , '--pretty=format:%ai', ref], cwd=repo)

    days = set()
    for line in text.decode('ascii').splitlines():
        date, time, timezone = line.split()
        days.add(date)
    return days


def active_days_per_author(repo, ref):
    '''Return the list of active days in 'repo' for each commit author.

    For example, if Fred made four commits on Monday, and Suzie committed once
    on Monday and Tuesday, you will get 3 results: Fred was active Monday,
    and Suzie was active Monday and Tuesday.

    '''

    # In theory, any character could appear in the email address
    # so we should use \0 as a separator, or something.
    # See: https://tools.ietf.org/html/rfc3696#section-3

    text = subprocess.check_output(
        ['git', 'log' , '--pretty=format:%ae:%ai', ref], cwd=repo)

    author_days = set()
    for line in text.decode('ascii').splitlines():
        author_email, datetime = line.split(':', 1)
        date, time, timezone = datetime.split()
        author_days.add((author_email, date))
    return author_days


def argument_parser():
    parser = argparse.ArgumentParser(
        description="Counts days where commits were made, across one or more "
                    "Git repositories.")

    #parser.add_argument(
    #    '--filter-author-email', metavar='PATTERN', nargs=1, type=str,
    #    help="only count commits where the author email matches a glob "
    #         "pattern")

    # It might be clearer to have the inverse of this option instead
    # (--combine-authors), but it's nice to have the default behaviour be
    # the same as that of `git-summary` and `git-effort`.
    parser.add_argument(
        '--per-author', action='store_true',
        help="count commits per author on each day, not just number of days")

    parser.add_argument(
        '--ref', metavar='REF', type=str, default='HEAD',
        help="branch or tag to measure from (defaults to what is checked out)")

    parser.add_argument(
        'repos', metavar='[<repos>]', type=str, nargs='*',
        help="Path to one or more Git repos. Where there are multiple repos, "
             "an 'active day' is one where there was a commit in any of those "
             "repos. If no paths are given, the current directory is used.")

    return parser


def main():
    args = argument_parser().parse_args()


    # This returns an 'overall' active days figure, when given multiple repos.
    # I'm not sure how useful that actually is.

    result = None

    if args.per_author:
        all_author_days = set()
        for repo in args.repos or ['.']:
            author_days = active_days_per_author(repo, ref=args.ref)
            all_author_days.update(author_days)
        result = len(all_author_days)
    else:
        all_days = set()
        for repo in args.repos or ['.']:
            days = active_days(repo, ref=args.ref)
            all_days.update(days)
        result = len(all_days)

    print(result)


main()
